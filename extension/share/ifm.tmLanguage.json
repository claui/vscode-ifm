{
  "name": "IFM",
  "scopeName": "source.ifm",
  "uuid": "58618e38-ae1a-4ad2-8bb9-415f2118fd66",
  "injections": {
    "L:meta.section.command-tail.require.ifm": {
      "comment": "Special case for `require`, which cannot have a string literal as a body. So weâ€™re prepending these patterns to the `#command-tail` include, giving them higher priority.",
      "patterns": [
        {
          "match": "[0-9](?:[0-9]*\\.[0-9]+)*",
          "comment": "The only valid pattern for `require`",
          "name": "constant.numeric.decimal.ifm"
        },
        {
          "match": ".*(?=;)",
          "comment": "Short-circuit so we can never reach the `#command-tail` include",
          "name": "invalid.illegal.version.number"
        }
      ]
    }
  },
  "patterns": [
    {
      "comment": "Line comments take precedence before everything else",
      "include": "#comment"
    },
    {
      "comment": "A command, which has the form `<type> <body> [attribute-list];`",
      "include": "#command"
    }
  ],
  "repository": {
    "attribute-list": {
      "patterns": []
    },
    "command": {
      "begin": "(\\w+)\\s+",
      "beginCaptures": {
        "1": {
          "name": "meta.section.tag.command.type",
          "patterns": [
            {
              "include": "#command-type"
            }
          ]
        }
      },
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.ifm"
        }
      },
      "name": "meta.section.command.$1.ifm",
      "contentName": "meta.section.command-tail.$1.ifm",
      "applyEndPatternLast": false,
      "patterns": [
        {
          "include": "#command-tail"
        }
      ]
    },
    "command-tail": {
      "patterns": [
        {
          "comment": "A command body can be a string",
          "begin": "\"(?:[^\"]|\\\\\")+(?<!\\\\)\"",
          "beginCaptures": {
            "0": {
              "name": "meta.section.command.body",
              "patterns": [
                {
                  "include": "#string"
                }
              ]
            }
          },
          "end": "(?=;)",
          "applyEndPatternLast": false,
          "name": "meta.section.command.attribute-list",
          "patterns": [
            {
              "include": "#space-and-attribute-list"
            }
          ]
        },
        {
          "match": ".*",
          "name": "invalid.illegal.command.body"
        }
      ]
    },
    "command-type": {
      "patterns": [
        {
          "match": "(require|room|title)",
          "name": "meta.keyword.$1 keyword.other.$1 strong.$1"
        },
        {
          "match": ".*",
          "name": "invalid.illegal.command.type"
        }
      ]
    },
    "comment": {
      "match": "((#)\\p{Print}*)$",
      "captures": {
        "1": {
          "name": "comment.line.ifm"
        },
        "2": {
          "name": "punctuation.definition.comment.ifm"
        }
      }
    },
    "space-and-attribute-list": {
      "patterns": [
        {
          "begin": "\\s+",
          "end": "(?=;)",
          "name": "meta.section.command.attribute-list",
          "patterns": [
            {
              "include": "#attribute-list"
            }
          ]
        },
        {
          "match": "\\S",
          "name": "invalid.illegal.missing.space.before.attribute-list"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ifm"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.ifm"
        }
      },
      "name": "string.quoted.double.ifm",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.ifm"
        }
      ]
    }
  }
}
