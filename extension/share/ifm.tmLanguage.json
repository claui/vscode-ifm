{
  "name": "IFM",
  "scopeName": "source.ifm",
  "uuid": "58618e38-ae1a-4ad2-8bb9-415f2118fd66",
  "injections": {
    "L:meta.section.command-tail.link.ifm": {
      "comment": "Special case for the `link` command, whose body has a special syntax. So we’re prepending these patterns to the `#command-tail` include, giving them higher priority.",
      "patterns": [
        {
          "include": "#link-tail"
        },
        {
          "match": "\".*",
          "comment": "Make sure we never match the `#command-tail` include",
          "name": "invalid.illegal.link.syntax"
        }
      ]
    },
    "L:meta.section.command-tail.require.ifm": {
      "comment": "Special case for `require`, which cannot have a string literal as a body. So we’re prepending these patterns to the `#command-tail` include, giving them higher priority.",
      "patterns": [
        {
          "comment": "The only valid pattern for `require`",
          "include": "#number"
        },
        {
          "match": "\\S.*(?=;)",
          "comment": "Short-circuit so we can never reach the `#command-tail` include",
          "name": "invalid.illegal.version.number"
        }
      ]
    },
    "R:meta.section.attribute-expression.____": {},
    "R:meta.section.attribute-expression.cmd": {
      "patterns": [
        {
          "include": "#builtin-keyword"
        },
        {
          "include": "#string"
        }
      ]
    },
    "R:meta.section.attribute-expression.dir": {
      "patterns": [
        {
          "include": "#compass"
        },
        {
          "include": "#number"
        }
      ]
    },
    "R:meta.section.attribute-expression.go": {
      "patterns": [
        {
          "include": "#compass"
        },
        {
          "include": "#otherdir"
        }
      ]
    },
    "R:meta.section.attribute-expression.exit": {
      "patterns": [
        {
          "include": "#compass"
        }
      ]
    },
    "R:meta.section.attribute-expression.hidden, meta.section.attribute-expression.nopath, meta.section.attribute-expression.oneway": {
      "patterns": [
        {
          "match": "\\S+",
          "name": "invalid.illegal.extraneous.argument"
        }
      ]
    },
    "R:meta.section.attribute-expression.after, meta.section.attribute-expression.before, meta.section.attribute-expression.lose": {
      "patterns": [
        {
          "include": "#id-list"
        }
      ]
    },
    "R:meta.section.attribute-expression.in, meta.section.attribute-expression.tag": {
      "patterns": [
        {
          "include": "#id"
        }
      ]
    },
    "R:meta.section.attribute-expression.score": {
      "patterns": [
        {
          "include": "#number"
        }
      ]
    }
  },
  "patterns": [
    {
      "comment": "Line comments take precedence before everything else",
      "include": "#comment"
    },
    {
      "comment": "A command, which has the form `<type> <body> [attribute-list];`",
      "include": "#command"
    }
  ],
  "repository": {
    "attribute-name": {
      "match": "\\b(after|before|cmd(?:\\s+(?:from|none|to))?|dir|do|drop(?:\\s+all)?|exit|finish|follow|get|give|given|go(?:to)?|hidden|ignore|in|join|keep(?:\\s+(?:with|until))?|leave(?:\\s+all)?|length|link|lose|lost|need|nodrop|nolink|nopath|note|oneway|safe|score|start|style|tag)\\b",
      "name": "entity.other.attribute.$1.ifm"
    },
    "attribute-list": {
      "begin": "\\b(\\w+)\\s+",
      "beginCaptures": {
        "1": {
          "name": "meta.section.attribute.name.$1",
          "patterns": [
            {
              "include": "#attribute-name"
            }
          ]
        }
      },
      "end": "(?=\\s*(?:(?:after|before|cmd|dir|do|drop|exit|finish|follow|get|give|given|go|hidden|ignore|(?<!go\\s+)in|join|keep|leave|length|link|lose|lost|need|nodrop|nolink|nopath|note|oneway|safe|score|start|style|tag)\\b|;))",
      "name": "meta.section.attribute-expression.$1",
      "patterns": [
        {
          "include": "#disallow-reserved-words"
        }
      ]
    },
    "builtin-keyword": {
      "match": "\\b(from|none|to|with|until)\\b",
      "name": "keyword.operator.wordlike.$1.ifm"
    },
    "builtin-reference": {
      "match": "\\b(it|last|them)\\b",
      "name": "variable.language.$1.ifm"
    },
    "command": {
      "begin": "(\\w+)\\s+",
      "beginCaptures": {
        "1": {
          "name": "meta.section.command.$1.type",
          "patterns": [
            {
              "include": "#command-type"
            }
          ]
        }
      },
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.ifm"
        }
      },
      "name": "meta.section.command.$1.ifm",
      "contentName": "meta.section.command-tail.$1.ifm",
      "applyEndPatternLast": false,
      "patterns": [
        {
          "include": "#command-tail"
        }
      ]
    },
    "command-tail": {
      "patterns": [
        {
          "comment": "A command body can be a string",
          "begin": "\"(?:[^\"]|\\\\\")+(?<!\\\\)\"",
          "beginCaptures": {
            "0": {
              "name": "meta.section.command.body",
              "patterns": [
                {
                  "include": "#string"
                }
              ]
            }
          },
          "end": "(?=;)",
          "applyEndPatternLast": false,
          "patterns": [
            {
              "include": "#space-and-attribute-list"
            }
          ]
        },
        {
          "match": ".*",
          "name": "invalid.illegal.command.body"
        }
      ]
    },
    "command-type": {
      "patterns": [
        {
          "match": "endstyle|link|item|join|map|require|room|style|task|title",
          "name": "meta.keyword.$1 keyword.other.$1 strong.$1"
        },
        {
          "match": ".*",
          "name": "invalid.illegal.command.type"
        }
      ]
    },
    "comment": {
      "match": "((#)\\p{Print}*)$",
      "captures": {
        "1": {
          "name": "comment.line.ifm"
        },
        "2": {
          "name": "punctuation.definition.comment.ifm"
        }
      }
    },
    "compass": {
      "match": "\\b(n(w|e)?|north(west|east)?|s(w|e)?|south(west|east)?|w(est)?|e(ast)?)\\b",
      "name": "constant.character.compass"
    },
    "disallow-reserved-words": {
      "match": "\\b(all|endstyle|link|item|join|map|require|room|task|title)\\b",
      "name": "invalid.illegal.reserved.word"
    },
    "id": {
      "patterns": [
        {
          "include": "#builtin-reference"
        },
        {
          "include": "#tag-name"
        }
      ]
    },
    "id-list": {
      "patterns": [
        {
          "include": "#builtin-reference"
        },
        {
          "include": "#tag-name"
        }
      ]
    },
    "link-tail": {
      "begin": "(\\w+)\\s+(to)\\s+(\\w+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#id"
            }
          ]
        },
        "2": {
          "name": "keyword.operator.wordlike.$2.ifm"
        },
        "3": {
          "patterns": [
            {
              "include": "#id"
            }
          ]
        }
      },
      "end": "(?=;)",
      "applyEndPatternLast": false,
      "patterns": [
        {
          "include": "#space-and-attribute-list"
        }
      ]
    },
    "number": {
      "match": "[0-9](?:[0-9]*\\.[0-9]+)*",
      "name": "constant.numeric.decimal.ifm"
    },
    "otherdir": {
      "match": "\\b(in|down|out|up)\\b",
      "name": "constant.character.otherdir"
    },
    "space-and-attribute-list": {
      "patterns": [
        {
          "begin": "\\s+",
          "end": "(?=;)",
          "name": "meta.section.attribute-list",
          "patterns": [
            {
              "include": "#attribute-list"
            }
          ]
        },
        {
          "match": "\\S",
          "name": "invalid.illegal.missing.space.before.attribute-list"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ifm"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.ifm"
        }
      },
      "name": "string.quoted.double.ifm",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.ifm"
        }
      ]
    },
    "tag-name": {
      "match": "\\b[a-zA-Z][a-zA-Z0-9_]*\\b",
      "name": "entity.name.label.$0.ifm"
    }
  }
}
